name: Deploy to Cloud Run

on:
  workflow_call:
    inputs:
      packageName:
        required: true
        type: string
      taskDefinition:
        required: true
        type: string
      service:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY_PREFIX: ai-meme-generator

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout
      - uses: pnpm/action-setup@v2
        with:
          version: 7.19.0
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: github-actions
          aws-region: ${{ env.AWS_REGION }}
      - name: Get package directory
        id: package-dir
        run: |
          PACKAGE_DIR=$(pnpm list -r --json | jq --arg packageName ${{ inputs.packageName }} -r '.[] | select( .name | contains($packageName)) | .path')
          echo "package-dir=$PACKAGE_DIR" >> $GITHUB_OUTPUT
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
      - name: Set image tag
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "image-repo=$ECR_REGISTRY/$ECR_REPOSITORY_PREFIX/${{ inputs.packageName }}" >> $GITHUB_ENV
          echo "image-tag=$ECR_REGISTRY/$ECR_REPOSITORY_PREFIX/${{ inputs.packageName }}:latest" >> $GITHUB_ENV
      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          file: ${{ steps.package-dir.outputs.package-dir }}/Dockerfile
          tags: ${{ env.image-tag }}
          target: app
      - name: Download task def
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.taskDefinition }} --query taskDefinition > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: task-definition.json
          container-name: app
          image: "${{ env.image-tag }}@${{ steps.build-image.outputs.digest }}"
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.service }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: false
